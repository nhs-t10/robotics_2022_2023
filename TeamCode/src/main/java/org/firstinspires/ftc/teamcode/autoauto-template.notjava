/*PACKAGE_DECLARATION*/

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;

import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.ColorRangeSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.NormalizedColorSensor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.TouchSensor;

import org.firstinspires.ftc.teamcode.managers.feature.FeatureManager;
import org.firstinspires.ftc.teamcode.managers.sensor.ColorSensor;
import org.firstinspires.ftc.teamcode.managers.nate.GiraffeManager;
import org.firstinspires.ftc.teamcode.managers.CV.CVManager;
import org.firstinspires.ftc.teamcode.managers.imu.ImuManager;
import org.firstinspires.ftc.teamcode.managers.manipulation.ManipulationManager;
import org.firstinspires.ftc.teamcode.managers.movement.MovementManager;
import org.firstinspires.ftc.teamcode.managers.sensor.SensorManager;
import org.firstinspires.ftc.teamcode.managers.telemetry.TelemetryManager;
import org.firstinspires.ftc.teamcode.managers.nate.NateManager;
import org.firstinspires.ftc.teamcode.managers.autocorrection.AutocorrectionManager;
import org.firstinspires.ftc.teamcode.managers.bigArm.bigArmManager;
import org.firstinspires.ftc.teamcode.managers.roadrunner.RRManager;
import dev.autoauto.model.AutoautoProgram;
import dev.autoauto.runtime.AutoautoRuntime;
import org.firstinspires.ftc.teamcode.auxilary.buildhistory.BuildHistory;//reconfigureForAuto
//import com.acmerobotics.roadrunner.*; <-- This doesn't work
import com.acmerobotics.roadrunner.geometry.Pose2d;
import com.acmerobotics.roadrunner.geometry.Vector2d;
import com.acmerobotics.roadrunner.localization.Localizer;
import com.acmerobotics.roadrunner.trajectory.TrajectoryBuilder;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.HardwareMap;


@Autonomous(name = "/*NO_CONFLICT_NAME*/")
public class template extends OpMode {
    MovementManager driver;
    ManipulationManager limbs;
    ImuManager imu;
    CVManager cv;
    NateManager clawPosition;
    TelemetryManager telemetryManager;
    GiraffeManager neck;
    bigArmManager arm;
    RRManager rr;

    AutoautoRuntime runtime;
    public void init() {
        FeatureManager.setIsOpModeRunning(true);
        FeatureManager.reconfigureForAuto();

        telemetryManager = new TelemetryManager(telemetry, this, TelemetryManager.BITMASKS.NONE);
        telemetry = telemetryManager;
        FeatureManager.logger.setBackend(telemetry.log());

        driver = new MovementManager(hardwareMap.get(DcMotor.class, "fl"),
                hardwareMap.get(DcMotor.class, "fr"),
                hardwareMap.get(DcMotor.class, "br"),
                hardwareMap.get(DcMotor.class, "bl"));
        limbs = new ManipulationManager(
                                hardwareMap,
                                new String[] { "nateMoverLeft", "nateMoverRight"},
                                new String[] {"nateClaw", "rampLeft", "rampRight", "intakeMoverRight", "intakeMoverLeft"},
                                new String[] {"Carousel", "ClawMotor", "noodle", "intake", "NeckMotor"}
                        );
       clawPosition = new NateManager(limbs, hardwareMap.tryGet(TouchSensor.class, "limit"));
       neck = new GiraffeManager(clawPosition);

        cv = new CVManager(hardwareMap);
        rr = new RRManager(hardwareMap, new Pose2d(0, 0), telemetryManager, this);
        imu = new ImuManager(hardwareMap.get(com.qualcomm.hardware.bosch.BNO055IMU.class, "imu"));

        arm = new bigArmManager(limbs);

        runtime = new AutoautoRuntime(generateProgram(), getClass().getCanonicalName(), imu, driver, limbs, telemetryManager, cv, clawPosition, neck, arm);
        
        /*COMPAT_MODE_SETTING*/

        telemetryManager.autoauto.setProgramOutlineJson(/*JSON_SETTING_CODE*/);
        telemetryManager.autoauto.setGlobalScope(runtime.globalScope);
    }

    boolean shouldActuallyDoThings = true;

    public void loop() {
        telemetry.addData("Build Name", BuildHistory.buildName);
        telemetry.addData("Build Time", BuildHistory.buildTimeIso);
        telemetry.update();
        try {
            if(shouldActuallyDoThings) runtime.loop();
        } catch (Throwable t) {
            FeatureManager.logger.log("ERROR IN AUTOAUTO!");
            FeatureManager.logger.log(t.toString());
            StackTraceElement[] e = t.getStackTrace();
            for(int i = 0; i < /*ERROR_STACK_TRACE_HEIGHT*/ && i < e.length;i++) {
                FeatureManager.logger.log(e[i].toString());
            }
            shouldActuallyDoThings = false;
        }
    }

    @Override
    public void stop() {
        FeatureManager.setIsOpModeRunning(false);
    }

    public AutoautoProgram generateProgram() {
        /*JAVA_CREATION_CODE*/
    }
}
